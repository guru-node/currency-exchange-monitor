version: '3.1'

services:
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - ex-monitor

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - mode: host
        published: 8081
        target: 8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    networks:
      - ex-monitor

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - DOCKER_CONTENT_TRUST=1
    networks:
      - ex-monitor

  kafka1:
    image: docker.io/bitnami/kafka:3.3
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9093,CLIENT://:9092,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka1:9093,CLIENT://kafka1:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - DOCKER_CONTENT_TRUST=1
    depends_on:
      - zookeeper
    networks:
      - ex-monitor

  kafka-ui:
    image: docker.redpanda.com/vectorized/console:latest
    container_name: kafka-ui
    ports:
      - "8083:8080"
    restart: always
    environment:
      - KAFKA_BROKERS=kafka1:9092
    depends_on:
      - kafka1
    networks:
      - ex-monitor

networks:
  ex-monitor:
    driver: bridge
    external: true

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
